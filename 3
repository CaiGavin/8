# -*- coding: utf-8 -*-
"""
Created on Mon Nov 13 20:49:17 2017

@author: junfeicai
"""

#coding:utf-8
import Tkinter
import tkFileDialog
import re
import matplotlib.pyplot as plt
import tkFont
import os
import pandas as pd
import xlsxwriter
import tkMessageBox as msg
from matplotlib.ticker import FormatStrFormatter
import pdb

#import sys
#reload(sys)
#sys.setdefaultencoding('utf-8')

fileType=[('','.xlsm'),('','.csv'),('','.xlsx'),('','.xls')]

def getFilePath():
    filepath=tkFileDialog.askopenfilename(initialdir=os.getcwd(),title="选取文件",filetypes=fileType)
    #root.destroy() 
    #root.quit()
    return(filepath)
def importDataFile():
    exlpath=getFilePath()
    global df
    df=pd.read_excel(exlpath,sheetname=0)
    eparam_c=re.compile('^\w+\(.*\)',re.IGNORECASE)
    etest_tuple=('cgg_0v','cgg_inv','cgg_acc','cgc_0v','cgc_inv','cgc_acc','vt_gm','vt_lin','vt_sat','idlin','idsat','ideff',
                'ioff','isoff','igoff','iboff','ig_inv','id1','id2','dibl','swing_lin','swing_sat','body_sat','gm','rout')
    for eachcolumn in df.columns:
        eparam_m=eparam_c.match(eachcolumn)
        if df[eachcolumn].count()==0:
            #删除空列
            df.drop(eachcolumn,axis=1, inplace=True)#axis参数告诉函数舍弃列还是行。axis=0舍弃行。
        elif eparam_m or eachcolumn.lower() in etest_tuple:
            ltb6.insert(Tkinter.END,str(eachcolumn))
        else:
            ltb.insert(Tkinter.END,str(eachcolumn))
def selectLtbIndex(selecttoLtb):
    listbox_tuple=(ltb,ltb1,ltb2,ltb3,ltb4,ltb5,ltb6)
    for eachltb in  listbox_tuple:
        select_list=[]
        select_list=list(eachltb.curselection())
        for eachselect in eachltb.curselection():
            if eachltb.get(eachselect) not in selecttoLtb.get(0,selecttoLtb.size()-1):
                selecttoLtb.insert(Tkinter.END,eachltb.get(eachselect))
            else:
                select_list.remove(eachselect)
                msg.showinfo('Attention:',eachltb.get(eachselect)+' is alreay selected in')
        if len(select_list)>0:
            select_list.reverse()
            for each_item in select_list:
                eachltb.delete(each_item)
                
#df[(df['a'] > 0) & (df['b'] < 0) | df['c'] > 0] 行条件筛选
grp_tuple=('k1','k2','k3','k4','k5','k6','k7','k8','k9')

def getDfmGrp(InDfm,LtBxLst,funcSendDfm,FlNm='',PartFigNm='',EtstNm=''):
    grpby=list(LtBxLst)
    Lenlist=len(LtBxLst)
    grp=InDfm.groupby(by=grpby,sort=False)
    #pdb.set_trace()
    key_tuple=grp_tuple[:Lenlist]
    for key_tuple,group in grp:
        nameStr=''
        if Lenlist>1:
            for ky in key_tuple:
                nameStr=nameStr+'_'+ str(ky)
        else:
            nameStr=nameStr+'_'+ str(key_tuple)
        
        if nameStr.startswith('_'):
            nameStr=nameStr[1:]
        if nameStr.find('_ckt'):
            nameStr=nameStr.replace('_ckt','')
        funcSendDfm(group,nameStr,FlNm,PartFigNm,EtstNm)
        
def getMultiFileData(btn):
    #首先获取TrendBy data，以便后续调用，且限制trendby为唯一参数
    global trendParam,btnName
    btnName=str(btn['text'])
    if ltb4.size()==1:
        trendParam=ltb4.get(0)
    elif ltb4.size()==0:
        msg.showinfo('Attention:','Please select a TrendBy Parameter!')
    elif ltb4.size()>1:
        msg.showinfo('Attention:','Only ONE TrendBy Parameter is allowed!')
    #当前目录下创建文件夹ExcelOut
    if not os.path.exists('ExcelOut'):
        os.mkdir('ExcelOut')
    
    if ltb1.size()>0:
        #get listbox tuple
        lst1=ltb1.get(0,ltb1.size()-1)
        getDfmGrp(df,lst1,getMultiFigureData)
    else:
        msg.showinfo('Error:','No Item in 【MultiFileBy】 Box!')
    
    #delete images if user select checkbox
    if chkbtn3Value.get()==1:
            delete_file_jpg(os.getcwd())

def getMultiFigureData(df_MultiFile,fileName,*NoNeed):
    global book,sheet
    global sheetname,book_path,img_path
    global row,row_ExcelReport
    global col_ExcelReport
    row_ExcelReport=0
    col_ExcelReport=0
    sheetname=str(fileName)
    
    book_path='ExcelOut\\'+fileName+'.xlsx'
    if os.path.exists(book_path):
        os.remove(book_path)
        
    img_path='ExcelOut\\'+fileName+'_img'
    if not os.path.exists(img_path):
        os.mkdir(img_path)
    
    book = xlsxwriter.Workbook(book_path)
    sheet = book.add_worksheet(sheetname)
    row=0

    if ltb2.size()>0:
        lst2=ltb2.get(0,ltb2.size()-1)
        getDfmGrp(df_MultiFile,lst2,multiEtestData,fileName)
    else:
        msg.showinfo('Error:','No Item in 【MultiFigureBy】 Box!')
    book.close()

def multiEtestData(df_MultiFig,strpartFigNm,fileName,*NoNeed):
    global row
    global col
    col=0
    
    for eachEtest in ltb6.get(0,ltb6.size()-1):
        multiPlotData(fileName,eachEtest,strpartFigNm,df_MultiFig)
    row=row+18
        
def multiPlotData(fileName,EtestNm,strpartFigNm,df_MultiEtest):
    global col

    if btnName=='GenImageReport':
        plt.figure()
        rect=[0.2,0.1,0.7,0.8]
        fig=plt.axes(rect)
        #rect=[左, 下, 宽, 高] 规定的矩形区域,rect矩形简写，这里的数值都是以figure大小为比例，
        #因此，若是要两个axes并排显示，那么axes[2]的左=axes[1].左+axes[1].宽，这样axes[2]才不会和axes[1]重叠。
    
    if ltb3.size()>0:
        lst3=ltb3.get(0,ltb3.size()-1)
        getDfmGrp(df_MultiEtest,lst3,drawPlot,fileName,strpartFigNm,EtstNm=EtestNm)
#        if df3_ltb1.empty==False:
#            lblnm=str(eachltb3_item1_element)
#            drawPlot(df3_ltb1[[trendParam,EtestNm]],trendParam,EtestNm,lblnm)
    else:
        msg.showinfo('Error:','No Item in 【MultiPlotBy】 Box!')
    
    if btnName=='GenImageReport':
        NoInFileNameStr_tuple=('/','*','\\','?','<','>',':','"','|',':')
        image_name=fileName+'_'+strpartFigNm+'_'+ str(EtestNm)+'.jpg'
        for eachstr in NoInFileNameStr_tuple:
            if eachstr in image_name:
                image_name=image_name.replace(eachstr,'')
                
        xmajorFormatter = FormatStrFormatter('%5.2f') #设置x轴标签文本的格式
        figure_name=strpartFigNm+'_'+ str(EtestNm)
        box=fig.get_position()
        fig.set_position([box.x0,box.y0,box.width*0.8,box.height])
        plt.title(figure_name,fontsize=16,family="Arial",weight='bold')
        plt.xlabel('L',fontsize=13,family="Arial",weight='bold')
        plt.ylabel(str(EtestNm),fontsize=13,family="Arial",weight='bold')
        plt.xticks(fontsize=12,weight='bold')
        plt.yticks(fontsize=12,weight='bold')
        if trendParam in ('L','NFIN'):
            plt.xscale('log')
            

        fig.xaxis.set_major_formatter(xmajorFormatter)
        fig.grid(color='#95a5a6',linestyle='--', linewidth=1 ,axis='both',alpha=0.4)
        fig.legend(loc='center left',bbox_to_anchor=(1, 0.5),ncol=1,fontsize=10)
        fig.spines['bottom'].set_linewidth(2)
        fig.spines['top'].set_linewidth(2)
        fig.spines['left'].set_linewidth(2)
        fig.spines['right'].set_linewidth(2)
        image_full_name=img_path+'\\'+image_name
        plt.savefig(image_full_name,dpi=1000)
        plt.show()
        sheet.insert_image(row,col,image_full_name,{'x_scale':0.585,'y_scale':0.62})#,{'x_scale':0.3,'y_scale':0.4}
    col+=7
                
def drawPlot(plotDataDfm,LabelNm,fileName,strpartFigNm,EtestNm,*NoNeed):
    global col
    print plotDataDfm
    xcolNm=trendParam
    ycolNm=EtestNm
    #两列的表示方法为df[['NFIN','W']]
    df_plotData=plotDataDfm[[xcolNm,ycolNm]]
    
    df_plotData=df_plotData.fillna(' ')
    x=df_plotData[xcolNm].values
    y=df_plotData[ycolNm].values
    #print df_plotData
    
    if btnName=='GenImageReport':
        x=df_plotData[xcolNm].values
        y=df_plotData[ycolNm].values
        if 'sim' in LabelNm:
            plt.plot(x,y,'p-',label=str(LabelNm),color='black',markersize=7,linewidth = '1',)
        elif 'target' in LabelNm.lower():
            plt.plot(x,y,'s',label=str(LabelNm),markersize=7)
        elif 'model' in LabelNm:
            plt.plot(x,y,'p-',label=str(LabelNm),color='blue',markersize=7,linewidth = '1',)
        else:
            plt.plot(x,y,'-o',label=str(LabelNm),markersize=7)
            
        for a,b in zip(x,y):
            plt.text(a, b, '%f' % b, ha='center', va= 'bottom',fontsize=11)
    elif btnName=='GenExcelReport':
        global col_ExcelReport
        global row_ExcelReport
        sheet.write(row,col+1,trendParam)
        sheet.write(row,col+2,EtestNm)
        sheet.write(row,col+0,fileName)
        sheet.write(row+1,col+0,strpartFigNm)
        sheet.write(row+2,col+0,LabelNm)
        sheet.write_column(row+1,col+1,x)
        sheet.write_column(row+1,col+2,y)
    col+=3
               
def delete_file_jpg(file_path):
    for root,dirs,files in os.walk(file_path):
        for name in files:
            if name.endswith('.jpg'):
                os.remove(os.path.join(root,name))

root=Tkinter.Tk()
#root.geometry('1500x800')
root.geometry('+10+10') 
root.minsize(400,200) 
root.title("test") 

fm1=Tkinter.Frame(root,bd=5,bg='',height=70,width=400,highlightthickness=30)
fm1.grid(row=0,rowspan=1,column=1,columnspan=2,padx=0,pady=1,sticky='w')

fot0=tkFont.Font(family='Times',weight='bold',underline=1,size=18)
lfm1=Tkinter.LabelFrame(root,text='Trend Option',font=fot0,labelanchor='n',bd=4,height=200,width=200,highlightthickness=0)
lfm1.grid(row=1,rowspan=1,column=1,columnspan=2,padx=5,pady=1,sticky='w')

btn1=Tkinter.Button(fm1,text="GenImageReport",font=fot0,command=lambda:getMultiFileData(btn1),bg='grey',fg='red',width=20,height=2)
btn1.grid(row=1,rowspan=1,column=3,columnspan=2,padx=10,pady=0)
btn2=Tkinter.Button(fm1,text="GenExcelReport",font=fot0,command=lambda:getMultiFileData(btn2),bg='grey',fg='red',width=20,height=2)
btn2.grid(row=1,rowspan=1,column=5,columnspan=2,padx=10,pady=0,sticky='w')
btn3=Tkinter.Button(fm1,text="ImportExcelData",font=fot0,command=importDataFile,bg='grey',fg='red',width=20,height=2)
btn3.grid(row=1,rowspan=1,column=7,columnspan=1,padx=10,pady=0,sticky='e')

chkbtn3Value=Tkinter.IntVar()
fot1=tkFont.Font(family='Helvetica',weight='bold',underline=1)
chkbtn3=Tkinter.Checkbutton(fm1, text="DeleteImages",font=fot1,bg='grey',fg='black',variable=chkbtn3Value,onvalue=1,offvalue=0,width=20,height=2)
chkbtn3.grid(row=1,rowspan=1,column=0,columnspan=2,padx=10,pady=0)


ltbValue=Tkinter.StringVar()
ltb=Tkinter.Listbox(lfm1,activestyle="dotbox",bg='grey',fg='black',listvariable=ltbValue,selectmode=Tkinter.EXTENDED,height=22,width=30)
#ltb.insert(Tkinter.END,'Gavin')
ltb.grid(row=1,rowspan=6,column=0,columnspan=2,padx=1,pady=1,sticky='n')

fm2=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm2.grid(row=1,rowspan=1,column=2,columnspan=2,padx=0,pady=1,sticky='w')
fm3=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm3.grid(row=1,rowspan=1,column=4,columnspan=2,padx=0,pady=1,sticky='w')
fm4=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm4.grid(row=1,rowspan=1,column=6,columnspan=2,padx=0,pady=1,sticky='w')
fm5=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm5.grid(row=1,rowspan=1,column=8,columnspan=2,padx=0,pady=1,sticky='w')
fm6=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm6.grid(row=1,rowspan=1,column=10,columnspan=2,padx=0,pady=1,sticky='w')
fm7=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm7.grid(row=1,rowspan=1,column=12,columnspan=2,padx=0,pady=1,sticky='w')
fm8=Tkinter.Frame(lfm1,bd=1,bg='grey',height=70,width=100)
fm8.grid(row=1,rowspan=1,column=14,columnspan=2,padx=0,pady=1,sticky='w')

ltb1Value=Tkinter.StringVar()
ltb1=Tkinter.Listbox(fm3,activestyle="dotbox",bg='grey',fg='black',listvariable=ltb1Value,selectmode=Tkinter.EXTENDED,height=19,width=20)
ltb1.grid(row=2,rowspan=1,column=1,columnspan=2,padx=2,pady=1)
bel1=Tkinter.Label(fm3,bg='deepskyblue',text='MultiFileBy',height=2,width=20)
bel1.grid(row=1,rowspan=1,column=1,columnspan=2,padx=2,pady=1)

ltb2Value=Tkinter.StringVar()
ltb2=Tkinter.Listbox(fm4,activestyle="dotbox",bg='grey',fg='black',listvariable=ltb2Value,selectmode=Tkinter.EXTENDED,height=19,width=20)
ltb2.grid(row=2,rowspan=1,column=1,columnspan=2,padx=2,pady=1)
bel2=Tkinter.Label(fm4,bg='deepskyblue',text='MultiFigureBy',height=2,width=20)
bel2.grid(row=1,rowspan=1,column=1,columnspan=2,padx=2,pady=1)

ltb3Value=Tkinter.StringVar()
ltb3=Tkinter.Listbox(fm5,activestyle="dotbox",bg='grey',fg='black',listvariable=ltb3Value,selectmode=Tkinter.EXTENDED,height=19,width=20)
ltb3.grid(row=2,rowspan=1,column=1,columnspan=2,padx=2,pady=1)
bel3=Tkinter.Label(fm5,bg='deepskyblue',text='MultiPlotBy',height=2,width=20)
bel3.grid(row=1,rowspan=1,column=1,columnspan=2,padx=2,pady=1)

ltb4Value=Tkinter.StringVar()
ltb4=Tkinter.Listbox(fm6,activestyle="dotbox",bg='grey',fg='black',listvariable=ltb4Value,selectmode=Tkinter.EXTENDED,height=19,width=20)
ltb4.grid(row=2,rowspan=1,column=1,columnspan=2,padx=2,pady=1)
bel4=Tkinter.Label(fm6,bg='deepskyblue',text='TrendBy',height=2,width=20)
bel4.grid(row=1,rowspan=1,column=1,columnspan=2,padx=2,pady=1)

ltb5Value=Tkinter.StringVar()
ltb5=Tkinter.Listbox(fm7,activestyle="dotbox",bg='grey',fg='black',listvariable=ltb5Value,selectmode=Tkinter.EXTENDED,height=19,width=20)
ltb5.grid(row=2,rowspan=1,column=1,columnspan=2,padx=2,pady=1)
bel5=Tkinter.Label(fm7,bg='deepskyblue',text='Y_axisBy',height=2,width=20)
bel5.grid(row=1,rowspan=1,column=1,columnspan=2,padx=2,pady=1)

ltb6Value=Tkinter.StringVar()
ltb6=Tkinter.Listbox(fm8,activestyle="dotbox",bg='grey',fg='black',listvariable=ltb6Value,selectmode=Tkinter.EXTENDED,height=19,width=20)
ltb6.grid(row=2,rowspan=1,column=1,columnspan=2,padx=2,pady=1)
bel6=Tkinter.Label(fm8,bg='deepskyblue',text='E_test',height=2,width=20)
bel6.grid(row=1,rowspan=1,column=1,columnspan=2,padx=2,pady=1)

fot2=tkFont.Font(family='Times',weight='bold',underline=0,size=10)
fot3=tkFont.Font(family='Arial',weight='bold',underline=1,size=9)
btn_fm2_1=Tkinter.Button(fm2,text="MultiFileBy>>",font=fot2,command=lambda:selectLtbIndex(ltb1),bg='grey',fg='blue',width=13,height=3)
btn_fm2_1.grid(row=1,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
btn_fm2_2=Tkinter.Button(fm2,text="MultiFigureBy>>",font=fot2,command=lambda:selectLtbIndex(ltb2),bg='grey',fg='blue',width=13,height=3)
btn_fm2_2.grid(row=2,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
btn_fm2_3=Tkinter.Button(fm2,text="MultiPlotBy>>",font=fot2,command=lambda:selectLtbIndex(ltb3),bg='grey',fg='blue',width=13,height=3)
btn_fm2_3.grid(row=3,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
btn_fm2_4=Tkinter.Button(fm2,text="TrendBy>>",font=fot2,command=lambda:selectLtbIndex(ltb4),bg='grey',fg='blue',width=13,height=3)
btn_fm2_4.grid(row=4,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
btn_fm2_5=Tkinter.Button(fm2,text="YaxisBy>>",font=fot2,command=lambda:selectLtbIndex(ltb5),bg='grey',fg='blue',width=13,height=3)
btn_fm2_5.grid(row=5,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
btn_fm2_6=Tkinter.Button(fm2,text="E_test>>",font=fot2,command=lambda:selectLtbIndex(ltb6),bg='grey',fg='blue',width=13,height=3)
btn_fm2_6.grid(row=6,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
btn_fm2_7=Tkinter.Button(fm2,text="<<Remove",font=fot3,command=lambda:selectLtbIndex(ltb),bg='grey',fg='red',width=13,height=3)
btn_fm2_7.grid(row=7,rowspan=1,column=2,columnspan=2,ipadx=1,pady=0,sticky='n')
#chkbtn1Value=Tkinter.IntVar()
#chkbtn1=Tkinter.Checkbutton(root,text="Nfin_trend",bg='grey',fg='black',variable=chkbtn1Value,onvalue=1,offvalue=0)
#chkbtn1.grid(row=4,rowspan=1,column=2,columnspan=2,padx=10,pady=0)
#
#chkbtn2Value=Tkinter.IntVar()
#chkbtn2=Tkinter.Checkbutton(root,   text="L_trend",bg='grey',fg='black',variable=chkbtn2Value,onvalue=1,offvalue=0)
#chkbtn2.grid(row=5,rowspan=1,column=2,columnspan=2,padx=10,pady=0)



root.mainloop()






